微信公众号项目 170115 12:47
1.使用ngrok笔记
    由于ngrok被墙，采用国内代理实现。
    去http://www.ngrok.cc/login  登录 10039**@qq.com 851**74
    在其中创建本地服务器对外暴露的信息（它叫做客户端）
    得到客户端id后，就可以在本地使用其客户端来打开隧道了。具体方法：
    下载对应的版本，运行其批处理程序，提供对应的id即可。
    在办公室的id为：233fefd301c29248 给出的域名地址为：http://vgogoing.ngrok.cc/

    // 另外一个ngrok服务的启动
    C:\Users\Administrator\Desktop\windows_amd64>ngrok -config=ngrok.cfg -subdomain vgogoing 8080
    // 让mysql用于密码不过期的设置
    ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;


2.微信popular项目使用
    https://github.com/liyiorg/weixin-popular
3.功能设计：
    查询：根据不同的关键字查询不同的信息
    插入：按照特定格式插入消息

    教程：quartz http://blog.csdn.net/sup_heaven/article/details/37738283
    其中也有介绍操作excel的链接
    http://sundoctor.iteye.com/blog/399980

    看这个吧http://www.dexcoder.com/selfly/article/308
    http://blog.csdn.net/fish_di/article/details/47356655

    通过上述资料的查找，终于实现了quartz的功能
        总结：
        1) 在配置文件中进行配置，参见项目文件 resources/spring/spring-quartz.xml
            其中设置还依赖于spring框架的其他配置文件，比如数据库数据源的引用，quartz自己的properties文件也定义了一些具体内容。
        2）quartz简介（以便自己以后回忆）：http://blog.csdn.net/sup_heaven/article/details/37738283这个链接中有比较详细的描述。
            scheduler：代表一个Quartz的独立运行容器，Trigger和JobDetail可以注册到Scheduler中，
                两者在Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，
                Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一（但可以和Trigger的组和名称相同，因为它们是不同类型的）。
                Scheduler定义了多个接口方法，允许外部通过组及名称访问和控制容器中Trigger和JobDetail。
            JobDetail：它需要实现executeInternal方法，是实际工作的入口。
            Trigger：是一个类，描述触发Job执行的时间触发规则。主要有SimpleTrigger和CronTrigger这两个子类。
                当仅需触发一次或者以固定时间间隔周期执行，SimpleTrigger是最适合的选择；
                而CronTrigger则可以通过Cron表达式定义出各种复杂时间规则的调度方案：如每早晨9:00执行，周一、周三、周五下午5:00执行等；
        3）项目使用简述：SchedulerServiceImpl类完成了对一个Trigger的创建和管理，其中Trigger包含了实际业务的主要信息，保存在其JobDataMap中。
            在实际运行过程中，trigger由配置完成后的“系统”按照定时规则触发调用，调用后交由自己的MyQuartzJobBean来实现逻辑（它有调用了SimpleService来执行具体逻辑）。
            即
                a. 向SchedulerServiceImpl提交Trigger的操作（创建、暂停、删除、启用等）
                b. “系统”(JobExecutionContext)--达到触发规则条件-->MyQuartzJobBean（Trigger它保存着处理逻辑所需的意义）--> SimpleService具体处理
    功能设计2 定时任务管理
        所有定时任务的触发器都在表qrtz_triggers中，因为项目中只用到cron类型的定时，所以牵扯到具体的定时描述在qrtz_cron_triggers中
        操作流程：
        新建一个定时任务，它将获得一个trigger_name,然后它将是所有操作的入口。
        在timertask页面中，显示所有触发器的信息，包括“任务分类，任务描述，接收者们，当前状态，下次触发时间”等。
        自己定义一张表对应需要展示的部分，每一个部分可能都涉及到quartz内部的其他表。操作这张表，然后调用内部服务去处理quartz的表。

        将对象导出到Excel表格的资料参考。
        http://blog.csdn.net/lenotang/article/details/2823230

已经完成了公众号查询功能的框架，现在需要了解其数据库结构才能进一步处理。
正在构建响应局域网内部请求的业务逻辑。涉及到的诸多细节还是很累的。160828
完成了自动定时功能（但是没有实现用户操作，仅完成了逻辑）
完成了当客户端询问网络状态时一并返回待处理的任务（Task）。160903
增加了导入通讯录之后的文件处理逻辑。160907
增加了前台页面，完成了index 和contact,contact可以分组展示通讯录、导入通讯录了。160911
完成了在contact页面对单个分组、联系人的改、删功能。完美！160913
完成了已有的联系人迁移或者复制到新分组的功能。完美！160914
完成了查询和新建联系人功能！完美！160915 TODO 下载联系人模板的时候，最好下载数据库中的成果
正在实现定时任务的编辑功能。已经初步实现了定时任务中接收人的编辑功能。160920 完成了人员展示，但还没能编辑 DONE 160921
完成了定时任务的人员编辑功能。160923
正在进一步实现定时任务的编辑功能，UI上已经差不多了。160926
正在实现“功能”增选的功能。160927 已经实现前述功能，正在实现向后台提交操作功能。160929后台提交新建业务存在问题 TODO160930
新建和修改任务已经完成了逻辑修改，现在已经基本实现了几个大功能的增删改查的编辑。
对UI展示还有待美化：对一些展示太长的内容，需要用省略号，但是又要保留全部内容供JS读取。已完成！ 161001
完成了动态更新与手机交互的任务状态的展示功能。实现了页面自动刷新时间、查询时段等功能。161007
美化了部分UI，基本完成了页面中涉及的展示信息。161009
正在实现下一步计划，重新设计Function类。161009
已经在做不同DB不同表的读取功能逻辑了。现在需要在Maven中引入他们的支持包。161010
创建数据库连接的时候有错误！TODO 161010
细化了读取数据库不同字段，增加了判断规则，即当该字段的值满足一定条件后才需要被返回。161011
完善了上述逻辑，增加了范围判断。增加了对数据库配置是否能够连通的功能。现在需要开发前台对应逻辑。161012
前台UI因为逻辑复杂所以比较繁琐。161012
已经完了数据库连接测试功能，能够读取数据库的表格内容了。现在也完成了前台规则设置，但还没有整理规则。161013
开始进行规则的前台读取。161013
完成了判断关键字的逻辑（自认为很复杂的逻辑），正在逐步实现规则的判断。161014
完成了增加自定义SQL语句读取结果的功能。现在需要进一步完善逻辑。161016
完成了自定义SQL语句的判断和处理功能。现在开始做规则判断了。161017
规则判断的逻辑已经实现，需要验证！161018 TODO 不读取字段 但是使用规则
完成了从UI上规则转换为SQL语句的逻辑。161019
正在实现前后台保存function的逻辑。161020
前台function新建的逻辑（SQL和自定义规则）已经完成，现在需要实现其更新和删除的前后台逻辑。161021
正在实现前台编辑function的逻辑。161023 继续实现前台逻辑，UI对规则的展示。161024
完成了UI对规则的展示，但是需要考虑用户新增对某个字段的规则的情况，准备再测试连接中再次加强这个逻辑。TODO 161024
完成了使用Deferred来管理ajax执行序列，对普通方法的执行序列管理还需要进一步规划。161025
努力将各类方法改造成Deferred形式，function编辑这个需要这样，没有办法了。161026
改造完成了判断各个逻辑部分的方法，完善了一些逻辑漏洞，比如当修改了读取的表，其相关字段的设置应该自动失效。161028
正在实现群发短息的功能。已经完成了在编辑好信息的基础上生成Task的前后台逻辑了，现在需要继续添加获取功能查询结果的逻辑。161101
已经添加完成了前台查询功能结果的逻辑。但是发现查询信息由于功能模块存在问题，无法查询到信息，需要立即解决。TODO 161102
完善了后台功能查询结果的逻辑。现在已经能够得到后台查询结果了。在显示任务状态的页面，新增了对未发送消息进行取消的的操作。161103
将Controller进行了拆分。新增了针对河溪水库五项指标查询的逻辑。161107 已取消河溪水库的个性化定制！！！
正在完善联系人上传的逻辑，修复其存在的bug.161114 DONE!
需要在任务状态页面对任务进行状态的操作。TODO 161115 DONE
准备实现通过关键字查询功能结果的逻辑，现在内部逻辑已经实现，等待手机端、微信端的对接。161116
TODO 现在发现的问题是：微信所编写的方法多为static，似乎没有办法与SpringMVC进行融合，可能需要改一下。161118
正在改造上述问题。161121
TODO 可能要向着微信公众号管理的方向继续了。
已经完成了短信查询和微信查询两种逻辑，但是微信查询的高级功能（返回图文信息等）尚未实现，原因是考虑到图文信息需要管理员定义，
要实现定义必定要开发微信公众号管理相关页面以便于可视化。161123
完成了联系人增加等级功能。161124
TODO 增加了Contact 绑定其微信号的逻辑，涉及到可以定期推送提醒关注公众微信的短信。
正在进行绑定了手机号和微信号之间的相关逻辑开发。161124 仍然在继续（新增了联系人备用字段，用于存储备用信息，如更改绑定联系人微信号时的随机数）。161128
决定将联系人的信息分为两张表存储，正在查询如何在springmvc中优雅地实现。161129
正在努力完善联系人分表后的逻辑。161201 后台的逻辑基本上没有报错了，但是逻辑完整性尚未完全得到验证，前台合并了js，将所有contact的操作都集合到contact.js中，因此其他js文件中的方法需要改变和测试。161202
基本完成前台逻辑中关于联系人操作的共同逻辑部分（集中到contact.js中）。继续完善后台变更后的逻辑。161205
后台关键字查询逻辑基本完毕。161206
拟增加记录查询记录，并在网页端展示。161207 进行中，已完成！
需要对所有列表展示的内容进行分页处理了。TODO
将所有的询问逻辑均整合到AnswerService中去，进行中。161208 整合完成。161211
现在准备进行分页处理。TODO
正在增加手机端的新功能：可以从手机端粗略地进行群发。161214已完成前述功能。161215
TODO 需要增加任务的发送方式字段，即通过微信、短信的发送方式。161216
为了实现上述内容，改进了timertask的数据库（增加了字段receivetype），还需要对查询结果的逻辑完善。161218
完成了微信主动群发客服消息。现在有个问题不知道会不会重现：myToken文件会被清除。161220
完成了网页端主动群发客服消息。对于MyToken文件呗清除的原因已经找到了，就是服务器重启了，其文件也清除了。
TODO 下一步需要进行微信事件消息推送网页结果的功能。同时对多个功能结果也不够统一和规范，需要统一起来。 161221
将AccessToken也用数据库进行了存储。这样就不需要再服务器启动时初始化文件了。161224
TODO 需要新创建一个设置页面，将相关特殊化设置进行展示，用于编辑。
正在实施上述计划。161226
正在实现授权方面的逻辑判断。161229
授权判断已经实现。正在做Settings的展示。170102
Settings的展示已经完成，现在正在实现编辑，新增已经完成，需要继续完成更新和删除。170105
基本完成了设置的增删改功能，授权任务创建、授权状态展示也已经完成。现在需要在手机端实现任务发送和接收，然后还需要单独添加授权逻辑。170109
AR=Owngame=60-A4-4C-D0-21-A2
完成了授权的申请和授权的逻辑。等待验证。170110
授权逻辑基本正确。现在正在进行管理员和用户对权限申请和授予的逻辑，包括前台展示页面。170111
管理员登录已经实现，管理员提交数据的私密性也已经实现。现在需要实现服务器处理完成后的事情了。170112
完成了授权逻辑。TODO 现在需要添加用户在每个功能使用之前验证授权。 准备在settings中添加一个最近验证时间配合之。170113
完成了在每次使用功能时先检查一次权限。170115 OK!



TODO 下一步计划
准备尝试整个项目的发布自定义功能：
    比如当一个人需要用我们的项目去监听他已经存在的数据库，
    方案一：
    我们就需要自动地在安装整个项目的时候将自己的库在其数据库软件中建表等一系列操作。因此还需要一个安装包的程序研发。（太复杂不可行）
    方案二：
    在我们的触发器执行的时候读取其监听表的最新内容即可。（复杂度减小了，只需要创建不同的读取功能即可）
    参考：http://blog.csdn.net/yaerfeng/article/details/25025553


关于webapp文件夹下东西的说明：
 静态文件放置的位置（注意img文件夹的位置和使用时的配置，不要放在WEB-INF文件夹下tomcat容器会给屏蔽掉）

 项目简介：
 使用情景：某个已存在的业务系统（比如只能在值班室读取值班业务系统的相关信息）只能从其特定的环境读取信息，现在需要将这个系统进行扩展，实现不在值班室的人员也能自主查询值班信息。
 该系统（Smserver）能够通过设置，读取其他已存在业务系统的相关信息，完成对用户信息请求的目的。
 解决方案：
 Smserver考虑到值班室网络情况，放弃了成本过高的架设服务器的解决方案，采用“短信中心”的思路进行解决。
 1.首先将值班室网络环境升级为无线网络，添加作为短信中心的手机；
 2.在值班室一台能够与值班业务系统通信的电脑上安装Smserver系统；
 3.通过配置Smserver系统，实现读取其他系统的信息，完成使用需求；
 系统业务描述：
 主动发送：Smserver能够执行定时任务，并将定时任务查询到的信息采用短信群发的方式发送到特定人员手机中；
 应答询查：当用户通过短信关键字询查相关信息时，也能通过该系统实现通讯、查询、应答；

关于授权逻辑。
用户点击授权请求，会通过短信发送授权请求，根据用户的验证手机号码、用户名、生成一个验证成功与否的结果告知。

