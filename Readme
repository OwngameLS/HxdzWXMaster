微信公众号项目 161020 17:19
1.使用ngrok笔记
    由于ngrok被墙，采用国内代理实现。
    去http://www.ngrok.cc/login  登录 10039**@qq.com 851**74
    在其中创建本地服务器对外暴露的信息（它叫做客户端）
    得到客户端id后，就可以在本地使用其客户端来打开隧道了。具体方法：
    下载对应的版本，运行其批处理程序，提供对应的id即可。
    在办公室的id为：42c40b40cca7dcd0；在家的id为：
2.微信popular项目使用
    https://github.com/liyiorg/weixin-popular
3.功能设计：
    查询：根据不同的关键字查询不同的信息
    插入：按照特定格式插入消息

    教程：quartz http://blog.csdn.net/sup_heaven/article/details/37738283
    其中也有介绍操作excel的链接
    http://sundoctor.iteye.com/blog/399980

    看这个吧http://www.dexcoder.com/selfly/article/308
    http://blog.csdn.net/fish_di/article/details/47356655

    通过上述资料的查找，终于实现了quartz的功能
        总结：
        1) 在配置文件中进行配置，参见项目文件 resources/spring/spring-quartz.xml
            其中设置还依赖于spring框架的其他配置文件，比如数据库数据源的引用，quartz自己的properties文件也定义了一些具体内容。
        2）quartz简介（以便自己以后回忆）：http://blog.csdn.net/sup_heaven/article/details/37738283这个链接中有比较详细的描述。
            scheduler：代表一个Quartz的独立运行容器，Trigger和JobDetail可以注册到Scheduler中，
                两者在Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，
                Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一（但可以和Trigger的组和名称相同，因为它们是不同类型的）。
                Scheduler定义了多个接口方法，允许外部通过组及名称访问和控制容器中Trigger和JobDetail。
            JobDetail：它需要实现executeInternal方法，是实际工作的入口。
            Trigger：是一个类，描述触发Job执行的时间触发规则。主要有SimpleTrigger和CronTrigger这两个子类。
                当仅需触发一次或者以固定时间间隔周期执行，SimpleTrigger是最适合的选择；
                而CronTrigger则可以通过Cron表达式定义出各种复杂时间规则的调度方案：如每早晨9:00执行，周一、周三、周五下午5:00执行等；
        3）项目使用简述：SchedulerServiceImpl类完成了对一个Trigger的创建和管理，其中Trigger包含了实际业务的主要信息，保存在其JobDataMap中。
            在实际运行过程中，trigger由配置完成后的“系统”按照定时规则触发调用，调用后交由自己的MyQuartzJobBean来实现逻辑（它有调用了SimpleService来执行具体逻辑）。
            即
                a. 向SchedulerServiceImpl提交Trigger的操作（创建、暂停、删除、启用等）
                b. “系统”(JobExecutionContext)--达到触发规则条件-->MyQuartzJobBean（Trigger它保存着处理逻辑所需的意义）--> SimpleService具体处理
    功能设计2 定时任务管理
        所有定时任务的触发器都在表qrtz_triggers中，因为项目中只用到cron类型的定时，所以牵扯到具体的定时描述在qrtz_cron_triggers中
        操作流程：
        新建一个定时任务，它将获得一个trigger_name,然后它将是所有操作的入口。
        在timertask页面中，显示所有触发器的信息，包括“任务分类，任务描述，接收者们，当前状态，下次触发时间”等。
        自己定义一张表对应需要展示的部分，每一个部分可能都涉及到quartz内部的其他表。操作这张表，然后调用内部服务去处理quartz的表。

已经完成了公众号查询功能的框架，现在需要了解其数据库结构才能进一步处理。
正在构建响应局域网内部请求的业务逻辑。涉及到的诸多细节还是很累的。160828
完成了自动定时功能（但是没有实现用户操作，仅完成了逻辑）
完成了当客户端询问网络状态时一并返回待处理的任务（Task）。160903
增加了导入通讯录之后的文件处理逻辑。160907
增加了前台页面，完成了index 和contact,contact可以分组展示通讯录、导入通讯录了。160911
完成了在contact页面对单个分组、联系人的改、删功能。完美！160913
完成了已有的联系人迁移或者复制到新分组的功能。完美！160914
完成了查询和新建联系人功能！完美！160915
正在实现定时任务的编辑功能。已经初步实现了定时任务中接收人的编辑功能。160920 完成了人员展示，但还没能编辑 DONE 160921
完成了定时任务的人员编辑功能。160923
正在进一步实现定时任务的编辑功能，UI上已经差不多了。160926
正在实现“功能”增选的功能。160927 已经实现前述功能，正在实现向后台提交操作功能。160929后台提交新建业务存在问题 TODO160930
新建和修改任务已经完成了逻辑修改，现在已经基本实现了几个大功能的增删改查的编辑。
对UI展示还有待美化：对一些展示太长的内容，需要用省略号，但是又要保留全部内容供JS读取。已完成！ 161001
完成了动态更新与手机交互的任务状态的展示功能。实现了页面自动刷新时间、查询时段等功能。161007
美化了部分UI，基本完成了页面中涉及的展示信息。161009
正在实现下一步计划，重新设计Function类。161009
已经在做不同DB不同表的读取功能逻辑了。现在需要在Maven中引入他们的支持包。161010
创建数据库连接的时候有错误！TODO 161010
细化了读取数据库不同字段，增加了判断规则，即当该字段的值满足一定条件后才需要被返回。161011
完善了上述逻辑，增加了范围判断。增加了对数据库配置是否能够连通的功能。现在需要开发前台对应逻辑。161012
前台UI因为逻辑复杂所以比较繁琐。161012
已经完了数据库连接测试功能，能够读取数据库的表格内容了。现在也完成了前台规则设置，但还没有整理规则。161013
开始进行规则的前台读取。161013
完成了判断关键字的逻辑（自认为很复杂的逻辑），正在逐步实现规则的判断。161014
完成了增加自定义SQL语句读取结果的功能。现在需要进一步完善逻辑。161016
完成了自定义SQL语句的判断和处理功能。现在开始做规则判断了。161017
规则判断的逻辑已经实现，需要验证！161018 TODO 不读取字段 但是使用规则
完成了从UI上规则转换为SQL语句的逻辑。161019
正在实现前后台保存function的逻辑。161020
TODO 下一步计划
准备尝试整个项目的发布自定义功能：
    比如当一个人需要用我们的项目去监听他已经存在的数据库，
    方案一：
    我们就需要自动地在安装整个项目的时候将自己的库在其数据库软件中建表等一系列操作。因此还需要一个安装包的程序研发。（太复杂不可行）
    方案二：
    在我们的触发器执行的时候读取其监听表的最新内容即可。（复杂度减小了，只需要创建不同的读取功能即可）
    参考：http://blog.csdn.net/yaerfeng/article/details/25025553


关于webapp文件夹下东西的说明：
 静态文件放置的位置（注意img文件夹的位置和使用时的配置，不要放在WEB-INF文件夹下tomcat容器会给屏蔽掉）

 项目简介：
 使用情景：某个已存在的业务系统（比如只能在值班室读取值班业务系统的相关信息）只能从其特定的环境读取信息，现在需要将这个系统进行扩展，实现不在值班室的人员也能自主查询值班信息。
 该系统（Smserver）能够通过设置，读取其他已存在业务系统的相关信息，完成对用户信息请求的目的。
 解决方案：
 Smserver考虑到值班室网络情况，放弃了成本过高的架设服务器的解决方案，采用“短信中心”的思路进行解决。
 1.首先将值班室网络环境升级为无线网络，添加作为短信中心的手机；
 2.在值班室一台能够与值班业务系统通信的电脑上安装Smserver系统；
 3.通过配置Smserver系统，实现读取其他系统的信息，完成使用需求；
 系统业务描述：
 主动发送：Smserver能够执行定时任务，并将定时任务查询到的信息采用短信群发的方式发送到特定人员手机中；
 应答询查：当用户通过短信关键字询查相关信息时，也能通过该系统实现通讯、查询、应答；



